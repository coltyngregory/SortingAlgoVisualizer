{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingAlgorithms/MergeSort.js","SortingAlgorithms/SelectionSort.js","Components/SortingVisualizer.jsx","Components/FirePlace.jsx","Components/ControlPanel.jsx","App.js","index.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","iters","length","swapped","i","push","swap","bubbleSort","sort","a","b","firstIndex","secondIndex","temp","getMergeSortAnimations","mergeSort","javaScriptSortedArray","console","log","firstArray","secondArray","arraysAreEqual","startIndex","endIndex","middleIndex","Math","floor","sortArray","j","merge","getSelectionSortAnimations","N","minIndex","selectionSort","fireOn","FirePlace","sm","className","this","props","map","value","idx","style","height","backgroundColor","randomFireColour","React","Component","ControlPanel","state","isFireAlive","setStateAndRunCallbackHFBS","val","setState","handleFireButtonState","runCallbackStartSort","startSort","loop","id","src","type","Button","disabled","fireSize","variant","onClick","sparkAFireButton","sortButton","previousAlgo","sortingAlgos","sortingAlgoIdx","nextAlgo","min","max","sliderSpeed","onChange","event","changeSliderSpeed","target","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","e","handleChildStateIsFireAlive","childState","algorithm","pauseAudio","stopFlamesMoving","constantFire","animationSpeed","document","getElementsByClassName","random","playAudio","makeFlamesMove","handleFireSize","keepFireGoing","setTimeout","resetArray","makeFlamesMoveHelper","clearTimeout","getElementById","play","pause","isColorChange","arrayBars","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","barIndex","newHeight","barStyle","turnBarsGreen","barOneIdx","bars","arrayLength","Container","Row","noGutters","Col","handleSortingAlgoIdx","handleChildStateSortingAlgoIdx","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c6ed3473.chunk.js","sourcesContent":["  \r\nexport function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while(iters > 0) {\r\n        let swapped = false;\r\n        for(let i = 0; i < iters; ++i) {\r\n            animations.push([\"comparisonOne\", i, i + 1]);\r\n            animations.push([\"comparisonTwo\", i, i + 1]);\r\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([\"comparisonOne\", i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([\"comparisonTwo\", i, j]);\r\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([\"comparisonOne\", i, i]);\r\n        animations.push([\"comparisonTwo\", i, i]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([\"comparisonOne\", j, j]);\r\n        animations.push([\"comparisonTwo\", j, j]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        animations.push([\"comparisonOne\", i, i - startIndex]);\r\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\r\n        animations.push([\"comparisonTwo\", i, i - startIndex]);\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparisonOne\", j, minIndex]);\r\n            animations.push([\"comparisonTwo\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport { Container, Col, Row, Button } from 'react-bootstrap';\r\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort.js';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort.js';\r\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort.js';\r\n\r\nimport FirePlace from './FirePlace.jsx';\r\nimport ControlPanel from './ControlPanel.jsx';\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'black';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n// needed for makeFlamesMoveHelper function\r\nvar fireOn;\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            array: [],\r\n            sortingAlgos: [\"Bubble Sort\", \"Merge Sort\", \"Selection Sort\"],\r\n            sortingAlgoIdx: 0,\r\n            sparkAFireButton: \"Spark A Fire\",\r\n            fireSize: 10,\r\n            isFireAlive: false,\r\n            constantFire: true,\r\n            sortButton: true,\r\n            animationSpeed: 50,\r\n            sliderSpeed: 50,\r\n        };\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n        for (let i = 0; i < this.state.fireSize; i++) {\r\n            array.push(Math.floor((Math.random() * this.state.fireSize * 5) + 1));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    // handles state change for slider speed\r\n    changeSliderSpeed = (e) => {\r\n        this.setState({ sliderSpeed: e });\r\n        console.log(this.state.sliderSpeed);\r\n    }\r\n\r\n    // changes the value for the sorting button which determines algorithm to execute\r\n    previousAlgo = () => {\r\n        let idx = this.state.sortingAlgoIdx;\r\n\r\n        if (idx === 0) {\r\n            this.setState({ sortingAlgoIdx: 2 });\r\n        }else {\r\n            this.setState({ sortingAlgoIdx: idx - 1 });\r\n        };\r\n    }\r\n\r\n    nextAlgo = () => {\r\n        const idx = this.state.sortingAlgoIdx;\r\n\r\n        if (idx === 2) {\r\n            this.setState({ sortingAlgoIdx: 0 });\r\n        }else {\r\n            this.setState({ sortingAlgoIdx: idx + 1 });\r\n        };\r\n    }\r\n\r\n\r\n    // handles state change for child component ControlPanel\r\n    handleChildStateIsFireAlive = (childState) => {\r\n        this.setState({ isFireAlive: childState.isFireAlive });\r\n        this.handleFireButtonState();\r\n    }\r\n\r\n    // handles actions required after fireButtonState state change. Is called from the helper function above\r\n    handleFireButtonState() {\r\n        if (!this.state.isFireAlive) {\r\n            this.playAudio();\r\n            this.makeFlamesMove();\r\n        }\r\n        this.setState({ isFireAlive: true }, () => {this.handleFireSize()});\r\n    }  \r\n\r\n    handleFireSize() {\r\n        if (this.state.sparkAFireButton === \"Add A Log\") {\r\n            this.setState({ fireSize: this.state.fireSize + 10});\r\n        }else {\r\n            this.setState({ sparkAFireButton: \"Add A Log\" });\r\n        }\r\n    }\r\n\r\n    // updates the name of the \"Spark A Fire\" button\r\n    handleFireButton() {\r\n\r\n        this.playAudio();\r\n\r\n        if (this.state.sparkAFireButton === \"Add A Log\") {\r\n            this.setState({ fireSize: this.state.fireSize + 10});\r\n            \r\n        }else {\r\n            this.setState({ sparkAFireButton: \"Add A Log\" }, () => { this.keepFireGoing() });\r\n            \r\n        }\r\n    }\r\n\r\n    // setTimeout's asynchronous nature is tricky. Flames stop when \"Sort\" button is called. \r\n    // to do this I call the makeFlamesMove method with a helper which is using a timeout which can be stopped using clearTimeout() method\r\n    makeFlamesMoveHelper() {\r\n        fireOn = setTimeout(() => { this.makeFlamesMove() }, 200);\r\n    }\r\n\r\n    makeFlamesMove() {\r\n        this.resetArray();\r\n        this.makeFlamesMoveHelper();\r\n    }\r\n\r\n    stopFlamesMoving() {\r\n        clearTimeout(fireOn);\r\n        this.setState({ sortButton: false });\r\n    }\r\n\r\n\r\n    // toggle audio\r\n    playAudio() {\r\n        let x = document.getElementById(\"audio\");\r\n        x.play();\r\n    }\r\n\r\n    pauseAudio() {\r\n        let x = document.getElementById(\"audio\");\r\n        x.pause();\r\n    }\r\n\r\n\r\n    // executes the intended sort method using DRY principles\r\n    startSort = () => {\r\n        let algorithm = this.state.sortingAlgos[this.state.sortingAlgoIdx];\r\n\r\n        this.pauseAudio();\r\n        this.stopFlamesMoving();\r\n\r\n        if (algorithm === \"Bubble Sort\") {\r\n            this.bubbleSort();\r\n        }\r\n\r\n        if (algorithm === \"Merge Sort\") {\r\n            this.mergeSort();\r\n        }\r\n\r\n        if (algorithm === \"Selection Sort\") {\r\n            this.selectionSort();\r\n        }\r\n    }\r\n\r\n    // animates virtual flames\r\n    randomFireColour() {\r\n        let randomIndex = (Math.floor((Math.random() * 5)));\r\n        let colors = [\"red\", \"orange\", \"orange\", \"orange\", \"yellow\"];\r\n        return colors[randomIndex];\r\n    }\r\n\r\n    // Sorting algorithms\r\n    bubbleSort() {\r\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparisonOne\" || animations[i][0] == \"comparisonTwo\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparisonOne\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * this.state.sliderSpeed);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * this.state.sliderSpeed);  \r\n            }\r\n            setTimeout(() => {\r\n                if (i === animations.length - 1) {\r\n                        console.log('here');\r\n                        this.turnBarsGreen();\r\n                    }\r\n            }, i * this.state.sliderSpeed);\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparisonOne\" || animations[i][0] == \"comparisonTwo\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const color = (animations[i][0] == \"comparisonOne\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                //If we don't multiply by the index then every animations[i] wait for exactly this.state.sliderSpeed and immediately change into final state\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * this.state.sliderSpeed);\r\n                \r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                  },i * this.state.sliderSpeed);\r\n            }\r\n            setTimeout(() => {\r\n                if (i === animations.length - 1) {\r\n                        console.log('here');\r\n                        this.turnBarsGreen();\r\n                    }\r\n            }, i * this.state.sliderSpeed);\r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparisonOne\") || (animations[i][0] === \"comparisonTwo\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparisonOne\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * this.state.sliderSpeed);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * this.state.sliderSpeed);  \r\n            }\r\n            setTimeout(() => {\r\n                if (i === animations.length - 1) {\r\n                        console.log('here');\r\n                        this.turnBarsGreen();\r\n                    }\r\n            }, i * this.state.sliderSpeed);\r\n        }\r\n    }\r\n\r\n    // Green sweep at the end to signal sorting completion\r\n    turnBarsGreen() {\r\n        const bars = document.getElementsByClassName(\"array-bar\");\r\n        const arrayLength = bars.length;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            setTimeout(() => {\r\n                const barStyle = bars[i].style;\r\n                barStyle.backgroundColor = 'green';\r\n            }, i * this.state.sliderSpeed);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row noGutters={true}>\r\n                    <Col sm={4} className=\"control-container\">\r\n                        <ControlPanel\r\n                            fireSize={this.state.fireSize}\r\n                            sparkAFireButton={this.state.sparkAFireButton}\r\n                            sortButton={this.state.sortButton}\r\n                            sortingAlgos={this.state.sortingAlgos}\r\n                            sortingAlgoIdx={this.state.sortingAlgoIdx}\r\n                            handleSortingAlgoIdx={(childState) => this.handleChildStateSortingAlgoIdx(childState)}\r\n                            handleFireButtonState={(childState) => this.handleChildStateIsFireAlive(childState)}\r\n                            nextAlgo={this.nextAlgo}\r\n                            previousAlgo={this.previousAlgo}\r\n                            startSort={this.startSort}\r\n                            changeSliderSpeed={this.changeSliderSpeed}\r\n                            sliderSpeed={this.state.sliderSpeed}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <FirePlace \r\n                            array={this.state.array}\r\n                            randomFireColour={this.randomFireColour}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\n\r\nclass FirePlace extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div sm={8} className=\"array-container\">\r\n\t\t\t\t<div className=\"flames\">\r\n\t\t\t\t\t{this.props.array.map((value, idx) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\tstyle={{height: `${value}px`, backgroundColor: this.props.randomFireColour()}}>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FirePlace;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass ControlPanel extends React.Component {\r\n\tstate = {\r\n            isFireAlive: false,\r\n\t}\r\n\r\n\t// callback for handleFireButtonState\r\n\tsetStateAndRunCallbackHFBS = (val) => {\r\n\t\tthis.setState(val, () => {\r\n\t\t\tthis.props.handleFireButtonState(this.state);\r\n\t\t});\r\n\t};\r\n\r\n\trunCallbackStartSort = () => {\r\n\t\tthis.props.startSort();\r\n\t} \r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\t\r\n\t            <h3>Sorting Visualizer</h3>\r\n\t            <audio loop=\"loop\" id=\"audio\" src=\"fire.mp3\" type=\"audio/mpeg\" />\r\n\t            <p className=\"buttonPadding\"></p>\r\n\t            <Button disabled={this.props.fireSize >= 30} variant=\"danger\" onClick={() => this.setStateAndRunCallbackHFBS({ isFireAlive: true })}>{this.props.sparkAFireButton}</Button>\r\n\t            <p className=\"buttonPadding\"></p>\r\n\t            <Button disabled={!this.props.sortButton} className=\"algoButton\" variant=\"success\" onClick={() => this.props.previousAlgo()}>🢀</Button><Button disabled={!this.props.sortButton} onClick={() => this.runCallbackStartSort()} variant=\"primary\">{this.props.sortingAlgos[this.props.sortingAlgoIdx]}</Button><Button disabled={!this.props.sortButton} className=\"algoButton\" variant=\"success\" onClick={() => this.props.nextAlgo()}>🢂</Button>\r\n\t            <p className=\"buttonPadding\">Slow Down</p>\r\n\t            <input disabled={!this.props.sortButton} type=\"range\" min=\"50\" max=\"1000\" value={this.props.sliderSpeed} onChange={(event) => this.props.changeSliderSpeed(event.target.value)}/>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ControlPanel;","import './App.css';\r\nimport SortingVisualizer from './Components/SortingVisualizer.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <SortingVisualizer></SortingVisualizer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}